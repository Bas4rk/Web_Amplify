type User
    @model
    @key(name: "emailAddressIndex", fields: ["emailAddress"], queryField: "emailIndex")
    @auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
    id: ID!
    name: String!
    iconImage: String
    headerImage: String
    profile: String
    emailAddress: String!
    createdAt: AWSDateTime
    updatedAt: AWSDateTime
    premium: Boolean!
    followees: [Relationship] @connection(keyName: "followee", fields: ["id"])
    followers: [Relationship] @connection(keyName: "follower", fields: ["id"])
    tweetPosts: [Tweet] @connection(keyName: "userId",fields: ["id"])
    trainingPosts: [Training] @connection(keyName: "userId",fields: ["id"])
    cookingPosts: [Cooking] @connection(keyName: "userId",fields: ["id"])
    comments: [Comment] @connection(keyName: "userId",fields: ["id"])
    favoriteList: [Favorite] @connection(keyName: "userId",fields: ["id"])
    bookmarkList: [Bookmark] @connection(keyName: "userId",fields: ["id"])
}

type Relationship
    @model
    @key(name: "followee", fields: ["followeeId"], queryField: "followeeIndex")
    @key(name: "follower", fields: ["followerId"], queryField: "followerIndex")
    @auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
    followeeId: ID!
    followerId: ID!
    blockBool: Boolean!
    followee: User @connection(fields: ["followeeId"])
    follower: User @connection(fields: ["followerId"])
}

type Tweet
@model
@key(name: "userId", fields: ["userId","createdAt"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  image: String
  content: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @connection(fields: ["userId"])
  comments: [Comment] @connection(keyName: "postId",fields: ["id"])
}

type Training
@model
@key(name: "userId", fields: ["userId","createdAt"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  image: String
  title: String!
  content: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @connection(fields: ["userId"])
  comments: [Comment] @connection(keyName: "postId",fields: ["id"])
}

type Cooking
@model
@key(name: "userId", fields: ["userId","createdAt"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  image: String
  title: String!
  content: String!
  calorie: Int!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @connection(fields: ["userId"])
  comments: [Comment] @connection(keyName: "postId",fields: ["id"])
}


type Comment
@model
@key(name: "postId", fields: ["postId"])
@key(name: "userId", fields: ["userId","createdAt"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  postId: ID!
  image: String
  content: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  user: User @connection(fields: ["userId"])
  tweet: Tweet @connection(fields: ["postId"])
  training: Training @connection(fields: ["postId"])
  cooking : Cooking  @connection(fields: ["postId"])
}

type Favorite
@model
@key(name: "userId", fields: ["userId"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  tweetId: ID!
  favoDate: AWSDateTime!
}

type Bookmark
@model
@key(name: "userId", fields: ["userId"])
@auth(rules: [{allow: owner, operations: [create, update, delete]}])
{
  id: ID!
  userId: ID!
  tweetId: ID!
  bmDate: AWSDateTime!
}


# カレンダー

type Calendar
    @model
    @auth(rules: [{allow: owner, operations: [read, create, update, delete]}])
    @key(fields:["owner"])
{
    owner: ID!
    memo :[Memo] @connection(keyName: "memo",fields: ["owner"])
}
type Memo
    @model
    @auth(rules: [{allow: owner, operations: [read, create, update, delete]}])
    @key(fields:["date"])
    @key(name: "memo",fields:["owner"])
{
    owner: ID!
    date: AWSDate!
    weight: Float
    bfp: Float
    foodMemos: [FoodMemo] @connection(keyName: "food",fields: ["date", "owner"])
    trainingMemos :[TrainingMemo] @connection(keyName: "training",fields: ["date", "owner"])
}
type FoodMemo
    @model
    @auth(rules: [{allow: owner, operations: [read, create, update, delete]}])
    @key(name: "food",fields:["memoDate", "owner"])
{
    owner: ID!
    memoDate: AWSDate!
    title: String!
    image: String
    calorele: Int
    lipid: Int
    proteins: Int
}
type TrainingMemo
    @model
    @auth(rules: [{allow: owner, operations: [read, create, update, delete]}])
    @key(name: "training",fields:["memoDate", "owner"])
{
    id: ID!
    owner: ID!
    memoDate: AWSDate!
    title: String!
    contentList: [TrainingContent] @connection(keyName: "trainingContent",fields: ["id"])
}

type TrainingContent
    @model
    @auth(rules: [{allow: owner, operations: [read, create, update, delete]}])
    @key(name: "trainingContent",fields:["trainingMemoId"])
{
    trainingMemoId:ID!
    content: String
}